{"version":3,"sources":["components/Navbar.js","components/Cards/index.js","components/Wrapper/index.js","components/Form/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","href","message","score","topscore","Cards","onClick","clickFunction","id","alt","src","image","Wrapper","children","Form","state","clickedOn","order","characters","resetGame","_this","setState","setOrder","temporder","length","number","Math","floor","random","indexOf","push","handleClick","event","preventDefault","target","tempmessage","_this2","this","components_Navbar","components_Wrapper","map","sequence","components_Cards","name","key","Component","App","components_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3190f1fc.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Navbar(props) {\n  return (\n    <div>\n      <nav className =\"navbar navbar-expand-lg navbar-dark bg-primary\">\n        <a className =\"navbar-brand\" href=\"/\">Avatar Clicky Game Reset</a>\n        <div className = \"white center\">\n          <h3>\n            {props.message}\n          </h3>\n        </div>\n        \n        <div className = \"white topright\">\n          <h3>\n            Score: {props.score} | TopScore: {props.topscore}\n          </h3>\n        </div>\n    </nav>\n    </div>\n  )\n};\n\nexport default Navbar;","\n    \nimport React from \"react\";\nimport \"./style.css\";\n\nfunction Cards(props) {\n  return (\n    <div  className=\"card\" onClick={props.clickFunction}>\n      <img id={props.id} alt={props.id} src={props.image} />\n    </div>\n  );\n}\n\nexport default Cards;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;","import React, { Component } from \"react\";\nimport \"./style.css\";\nimport Navbar from \"../Navbar\";\nimport Cards from \"../Cards\"\nimport Wrapper from \"../Wrapper\";\nimport characters from \"../../characters.json\";\n\nclass Form extends Component {\n  // Setting the component's initial state\n  state = {\n    score: 0,\n    topscore: 0,\n    clickedOn: [],\n    order: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19], \n    message: \"Click on a picture to begin!\",\n    characters\n  };\n\n  resetGame = () => {\n    this.setState({\n      score: 0,\n      clickedOn: []\n    });\n  }\n\n  setOrder = () => {\n    let temporder = [];\n    while (this.state.characters.length > temporder.length) {\n      let number = Math.floor(Math.random()*this.state.characters.length);\n      if (temporder.indexOf(number) < 0) {\n        temporder.push(number);\n        }\n      }\n    this.setState({order: temporder})\n  }\n\n  handleClick = event => {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    event.preventDefault();\n    if (this.state.clickedOn.indexOf(event.target.id) < 0 ) {\n      let tempmessage = \"\";\n      this.state.clickedOn.push(event.target.id);\n      this.setState({score: this.state.score + 1});\n      if (this.state.score >= this.state.characters.length-1) {\n        tempmessage = \"Congrats! You Won!\"\n        if (this.state.score > this.state.topscore) {\n          this.setState({topscore: this.state.score+1})\n        }\n        this.resetGame();\n      } else {\n        tempmessage = \"Correct! Pick a different picture.\"\n      }\n      this.setState({message: tempmessage});\n    } else {\n        if (this.state.score > this.state.topscore) {\n          this.setState({topscore: this.state.score})\n        }\n        this.setState({\n          score: 0,\n          clickedOn: [],\n          message: \"Wrong! Please start over.\"\n        });\n    }\n    this.setOrder();\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar score={this.state.score} topscore={this.state.topscore} message={this.state.message} />\n        <Wrapper>\n        {this.state.order.map(sequence => (\n          <Cards\n            clickFunction={this.handleClick}\n            id={this.state.characters[sequence].name}\n            image={this.state.characters[sequence].image}\n            key={this.state.characters[sequence].name}  \n          />\n        ))}\n        </Wrapper>\n        \n      </div>\n    );\n  }\n}\n\nexport default Form;","import React from \"react\";\nimport Form from \"./components/Form\";\n\nfunction App() {\n  return <Form />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}